syntax = "proto2";
package Electronics;

enum RELATION{
    EQUAL = 0;
    LESS = 1;
    GREATER = 2;
}

enum IO{
    IN = 4;
    OUT = 5;
    BIDIRECT = 6;
}

enum CLASS{
    POWER = 7;
    FUNCTION = 8;
    BOTH = 9;
}

enum FUNCTION_TYPE{
    ELECTRICAL = 10;
    COMMUNICATION = 11;
    FW_UPDATE = 12;
    RESET = 13;
    MODE = 14;
    LOGIC = 15;
    MOTOR = 16;
    ENABLE = 17;
    GND = 18;
    OTHER = 19;
    PWM = 20;
    DIGITAL = 21;
    ANALOG = 22;
    EXTERNAL_INTERRUPT = 23;
    SPI_SCK = 24;
    SPI_MOSI = 25;
    SPI_MISO = 26;
    SPI_SS = 27;
    I2C_SDA = 28;
    I2C_SCL = 29;
    UART_TX = 30;
    UART_RX = 31;
    DIGITAL_UART_TX = 32;
    DIGITAL_UART_RX = 33;
    DIGITAL_SPI_SCK = 34;
    DIGITAL_SPI_MOSI = 35;
    DIGITAL_SPI_MISO = 36;
    DIGITAL_SPI_SS = 37;
    DIGITAL_EXTERNAL_INTERRUPT = 38;
    PWM_EXTERNAL_INTERRUPT = 39;
    PWM_SPI_SCK = 40;
    PWM_SPI_MOSI = 41;
    PWM_SPI_MISO = 42;
    PWM_SPI_SS = 43;
    ANALOG_I2C_SDA = 44;
    ANALOG_I2C_SCL = 45;
    UART_RX_I2C_SDA = 46;
    UART_RX_I2C_SCL = 47;
    UART_TX_I2C_SDA = 48;
    UART_TX_I2C_SCL = 49;
    DIGITAL_EXTERNAL_INTERRUPT_I2C_SDA = 50;
    DIGITAL_EXTERNAL_INTERRUPT_I2C_SCL = 51;
    DIGITAL_EXTERNAL_INTERRUPT_UART_RX = 52;
    DIGITAL_EXTERNAL_INTERRUPT_UART_TX = 53;
    ADJUST = 54;
    DIGITAL_I2C_SDA = 55;
    DIGITAL_I2C_SCL = 56;
}

enum PHYSICAL_TYPE{
    NORMAL = 57;
    USB = 58;
    POWER_JACK = 59;
}

enum CONNECTION{
    OTO = 60;
    OTM = 61;
}

message bbox{
    required double length = 1;
    required double width = 2;
    required double height = 3;
}

message bounds{
    required double lb = 1;
    required double ub = 2;
}

// linear constraints
message lin_cons{
    repeated string var_name = 1;
    repeated double coefficient = 2;
    required double constant = 3;
    required RELATION type = 4;
}

message pin{
    required string name = 1;
    required CLASS pin_class  = 2;
    required FUNCTION_TYPE func_type = 3;
    required PHYSICAL_TYPE phys_type = 4;
    required IO io = 5;
    required CONNECTION connection = 6;
    required bool status = 7;
    required bounds v_bound = 8;
    required bounds i_bound = 9;
    required dependence dependents = 10;
}

message dependence{
    repeated string others = 1;
}

/************************************************/

message Component{
    extensions 100 to 200;

    required string component_name = 1;
    required string component_type = 2;
    required string component_class = 3;
    repeated pin pin = 4;
    required bool nonlin = 5;
    required bbox size = 6;
    required double weight = 7;
    required double price = 8;
}

message Motor{

    extend Component{
        optional Motor Info = 101;
    }

    optional double kt = 1;
    optional double ke = 2;
    optional double r = 3;
    optional double vin = 4;
    optional double i = 5;
    optional double torq = 6;
    optional double vel = 7;
}


message Voltage_Regulator{
    extend Component{
        optional Voltage_Regulator Info = 106;
    }
    repeated lin_cons cons = 1;
}


message H_Bridge{
    extend Component{
        optional H_Bridge Info = 102;
    }

    optional bounds logic_level = 1;
    repeated lin_cons linear_cons = 2;
}

message Micro_Controller{
    extend Component{
        optional Micro_Controller Info = 104;
    }
    optional bounds logic_level = 1;
}

message Battery{
    extend Component{
        optional Battery Info = 103;
    }

    optional double capacity = 1;
}


message Encoder{
    extend Component{
        optional Encoder Info = 109;
    }
    optional double frequency = 1;
}

message Bluetooth{
    extend Component{
        optional Bluetooth Info = 108;
    }

    optional double frequency = 1;
}

message Camera{
    extend Component{
        optional Camera Info = 107;
    }

    optional double frequency = 1;
}

message Force_Sensor{
    extend Component{
        optional Force_Sensor Info = 105;
    }
}
