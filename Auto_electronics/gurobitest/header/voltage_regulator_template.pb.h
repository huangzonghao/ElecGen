// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voltage_regulator_template.proto

#ifndef PROTOBUF_voltage_5fregulator_5ftemplate_2eproto__INCLUDED
#define PROTOBUF_voltage_5fregulator_5ftemplate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "motor_template.pb.h"
// @@protoc_insertion_point(includes)
namespace Electronics {
class Linear_Constraint;
class Linear_ConstraintDefaultTypeInternal;
extern Linear_ConstraintDefaultTypeInternal _Linear_Constraint_default_instance_;
class Motor;
class MotorDefaultTypeInternal;
extern MotorDefaultTypeInternal _Motor_default_instance_;
class Vregulator;
class VregulatorDefaultTypeInternal;
extern VregulatorDefaultTypeInternal _Vregulator_default_instance_;
class bounds;
class boundsDefaultTypeInternal;
extern boundsDefaultTypeInternal _bounds_default_instance_;
}  // namespace Electronics

namespace Electronics {

namespace protobuf_voltage_5fregulator_5ftemplate_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_voltage_5fregulator_5ftemplate_2eproto

enum Connection_type {
  EQUAL = 1,
  LESS = 2,
  GREATER = 3,
  LESS_OR_EQUAL = 4,
  GREATER_OR_EQUAL = 5
};
bool Connection_type_IsValid(int value);
const Connection_type Connection_type_MIN = EQUAL;
const Connection_type Connection_type_MAX = GREATER_OR_EQUAL;
const int Connection_type_ARRAYSIZE = Connection_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Connection_type_descriptor();
inline const ::std::string& Connection_type_Name(Connection_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Connection_type_descriptor(), value);
}
inline bool Connection_type_Parse(
    const ::std::string& name, Connection_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Connection_type>(
    Connection_type_descriptor(), name, value);
}
// ===================================================================

class Linear_Constraint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Electronics.Linear_Constraint) */ {
 public:
  Linear_Constraint();
  virtual ~Linear_Constraint();

  Linear_Constraint(const Linear_Constraint& from);

  inline Linear_Constraint& operator=(const Linear_Constraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Linear_Constraint& default_instance();

  static inline const Linear_Constraint* internal_default_instance() {
    return reinterpret_cast<const Linear_Constraint*>(
               &_Linear_Constraint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Linear_Constraint* other);

  // implements Message ----------------------------------------------

  inline Linear_Constraint* New() const PROTOBUF_FINAL { return New(NULL); }

  Linear_Constraint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Linear_Constraint& from);
  void MergeFrom(const Linear_Constraint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Linear_Constraint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string var_name = 1;
  int var_name_size() const;
  void clear_var_name();
  static const int kVarNameFieldNumber = 1;
  const ::std::string& var_name(int index) const;
  ::std::string* mutable_var_name(int index);
  void set_var_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_var_name(int index, ::std::string&& value);
  #endif
  void set_var_name(int index, const char* value);
  void set_var_name(int index, const char* value, size_t size);
  ::std::string* add_var_name();
  void add_var_name(const ::std::string& value);
  #if LANG_CXX11
  void add_var_name(::std::string&& value);
  #endif
  void add_var_name(const char* value);
  void add_var_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& var_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_var_name();

  // repeated double coefficient = 2;
  int coefficient_size() const;
  void clear_coefficient();
  static const int kCoefficientFieldNumber = 2;
  double coefficient(int index) const;
  void set_coefficient(int index, double value);
  void add_coefficient(double value);
  const ::google::protobuf::RepeatedField< double >&
      coefficient() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_coefficient();

  // required double constant = 3;
  bool has_constant() const;
  void clear_constant();
  static const int kConstantFieldNumber = 3;
  double constant() const;
  void set_constant(double value);

  // required .Electronics.Connection_type type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::Electronics::Connection_type type() const;
  void set_type(::Electronics::Connection_type value);

  // @@protoc_insertion_point(class_scope:Electronics.Linear_Constraint)
 private:
  void set_has_constant();
  void clear_has_constant();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> var_name_;
  ::google::protobuf::RepeatedField< double > coefficient_;
  double constant_;
  int type_;
  friend struct protobuf_voltage_5fregulator_5ftemplate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vregulator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Electronics.Vregulator) */ {
 public:
  Vregulator();
  virtual ~Vregulator();

  Vregulator(const Vregulator& from);

  inline Vregulator& operator=(const Vregulator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vregulator& default_instance();

  static inline const Vregulator* internal_default_instance() {
    return reinterpret_cast<const Vregulator*>(
               &_Vregulator_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Vregulator* other);

  // implements Message ----------------------------------------------

  inline Vregulator* New() const PROTOBUF_FINAL { return New(NULL); }

  Vregulator* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vregulator& from);
  void MergeFrom(const Vregulator& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vregulator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string in_pin_name = 9;
  int in_pin_name_size() const;
  void clear_in_pin_name();
  static const int kInPinNameFieldNumber = 9;
  const ::std::string& in_pin_name(int index) const;
  ::std::string* mutable_in_pin_name(int index);
  void set_in_pin_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_in_pin_name(int index, ::std::string&& value);
  #endif
  void set_in_pin_name(int index, const char* value);
  void set_in_pin_name(int index, const char* value, size_t size);
  ::std::string* add_in_pin_name();
  void add_in_pin_name(const ::std::string& value);
  #if LANG_CXX11
  void add_in_pin_name(::std::string&& value);
  #endif
  void add_in_pin_name(const char* value);
  void add_in_pin_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& in_pin_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_in_pin_name();

  // repeated string en_pin_name = 10;
  int en_pin_name_size() const;
  void clear_en_pin_name();
  static const int kEnPinNameFieldNumber = 10;
  const ::std::string& en_pin_name(int index) const;
  ::std::string* mutable_en_pin_name(int index);
  void set_en_pin_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_en_pin_name(int index, ::std::string&& value);
  #endif
  void set_en_pin_name(int index, const char* value);
  void set_en_pin_name(int index, const char* value, size_t size);
  ::std::string* add_en_pin_name();
  void add_en_pin_name(const ::std::string& value);
  #if LANG_CXX11
  void add_en_pin_name(::std::string&& value);
  #endif
  void add_en_pin_name(const char* value);
  void add_en_pin_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& en_pin_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_en_pin_name();

  // repeated string adj_pin_name = 11;
  int adj_pin_name_size() const;
  void clear_adj_pin_name();
  static const int kAdjPinNameFieldNumber = 11;
  const ::std::string& adj_pin_name(int index) const;
  ::std::string* mutable_adj_pin_name(int index);
  void set_adj_pin_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_adj_pin_name(int index, ::std::string&& value);
  #endif
  void set_adj_pin_name(int index, const char* value);
  void set_adj_pin_name(int index, const char* value, size_t size);
  ::std::string* add_adj_pin_name();
  void add_adj_pin_name(const ::std::string& value);
  #if LANG_CXX11
  void add_adj_pin_name(::std::string&& value);
  #endif
  void add_adj_pin_name(const char* value);
  void add_adj_pin_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& adj_pin_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_adj_pin_name();

  // repeated string out_pin_name = 12;
  int out_pin_name_size() const;
  void clear_out_pin_name();
  static const int kOutPinNameFieldNumber = 12;
  const ::std::string& out_pin_name(int index) const;
  ::std::string* mutable_out_pin_name(int index);
  void set_out_pin_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_out_pin_name(int index, ::std::string&& value);
  #endif
  void set_out_pin_name(int index, const char* value);
  void set_out_pin_name(int index, const char* value, size_t size);
  ::std::string* add_out_pin_name();
  void add_out_pin_name(const ::std::string& value);
  #if LANG_CXX11
  void add_out_pin_name(::std::string&& value);
  #endif
  void add_out_pin_name(const char* value);
  void add_out_pin_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& out_pin_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_out_pin_name();

  // repeated string gnd_pin_name = 13;
  int gnd_pin_name_size() const;
  void clear_gnd_pin_name();
  static const int kGndPinNameFieldNumber = 13;
  const ::std::string& gnd_pin_name(int index) const;
  ::std::string* mutable_gnd_pin_name(int index);
  void set_gnd_pin_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_gnd_pin_name(int index, ::std::string&& value);
  #endif
  void set_gnd_pin_name(int index, const char* value);
  void set_gnd_pin_name(int index, const char* value, size_t size);
  ::std::string* add_gnd_pin_name();
  void add_gnd_pin_name(const ::std::string& value);
  #if LANG_CXX11
  void add_gnd_pin_name(::std::string&& value);
  #endif
  void add_gnd_pin_name(const char* value);
  void add_gnd_pin_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& gnd_pin_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_gnd_pin_name();

  // repeated .Electronics.bounds in_pin_v_bounds = 14;
  int in_pin_v_bounds_size() const;
  void clear_in_pin_v_bounds();
  static const int kInPinVBoundsFieldNumber = 14;
  const ::Electronics::bounds& in_pin_v_bounds(int index) const;
  ::Electronics::bounds* mutable_in_pin_v_bounds(int index);
  ::Electronics::bounds* add_in_pin_v_bounds();
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
      mutable_in_pin_v_bounds();
  const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
      in_pin_v_bounds() const;

  // repeated .Electronics.bounds en_pin_v_bounds = 15;
  int en_pin_v_bounds_size() const;
  void clear_en_pin_v_bounds();
  static const int kEnPinVBoundsFieldNumber = 15;
  const ::Electronics::bounds& en_pin_v_bounds(int index) const;
  ::Electronics::bounds* mutable_en_pin_v_bounds(int index);
  ::Electronics::bounds* add_en_pin_v_bounds();
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
      mutable_en_pin_v_bounds();
  const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
      en_pin_v_bounds() const;

  // repeated .Electronics.bounds adj_pin_v_bounds = 16;
  int adj_pin_v_bounds_size() const;
  void clear_adj_pin_v_bounds();
  static const int kAdjPinVBoundsFieldNumber = 16;
  const ::Electronics::bounds& adj_pin_v_bounds(int index) const;
  ::Electronics::bounds* mutable_adj_pin_v_bounds(int index);
  ::Electronics::bounds* add_adj_pin_v_bounds();
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
      mutable_adj_pin_v_bounds();
  const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
      adj_pin_v_bounds() const;

  // repeated .Electronics.bounds out_pin_v_bounds = 17;
  int out_pin_v_bounds_size() const;
  void clear_out_pin_v_bounds();
  static const int kOutPinVBoundsFieldNumber = 17;
  const ::Electronics::bounds& out_pin_v_bounds(int index) const;
  ::Electronics::bounds* mutable_out_pin_v_bounds(int index);
  ::Electronics::bounds* add_out_pin_v_bounds();
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
      mutable_out_pin_v_bounds();
  const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
      out_pin_v_bounds() const;

  // repeated .Electronics.bounds gnd_pin_v_bounds = 18;
  int gnd_pin_v_bounds_size() const;
  void clear_gnd_pin_v_bounds();
  static const int kGndPinVBoundsFieldNumber = 18;
  const ::Electronics::bounds& gnd_pin_v_bounds(int index) const;
  ::Electronics::bounds* mutable_gnd_pin_v_bounds(int index);
  ::Electronics::bounds* add_gnd_pin_v_bounds();
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
      mutable_gnd_pin_v_bounds();
  const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
      gnd_pin_v_bounds() const;

  // repeated .Electronics.bounds in_pin_i_bounds = 19;
  int in_pin_i_bounds_size() const;
  void clear_in_pin_i_bounds();
  static const int kInPinIBoundsFieldNumber = 19;
  const ::Electronics::bounds& in_pin_i_bounds(int index) const;
  ::Electronics::bounds* mutable_in_pin_i_bounds(int index);
  ::Electronics::bounds* add_in_pin_i_bounds();
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
      mutable_in_pin_i_bounds();
  const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
      in_pin_i_bounds() const;

  // repeated .Electronics.bounds en_pin_i_bounds = 20;
  int en_pin_i_bounds_size() const;
  void clear_en_pin_i_bounds();
  static const int kEnPinIBoundsFieldNumber = 20;
  const ::Electronics::bounds& en_pin_i_bounds(int index) const;
  ::Electronics::bounds* mutable_en_pin_i_bounds(int index);
  ::Electronics::bounds* add_en_pin_i_bounds();
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
      mutable_en_pin_i_bounds();
  const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
      en_pin_i_bounds() const;

  // repeated .Electronics.bounds adj_pin_i_bounds = 21;
  int adj_pin_i_bounds_size() const;
  void clear_adj_pin_i_bounds();
  static const int kAdjPinIBoundsFieldNumber = 21;
  const ::Electronics::bounds& adj_pin_i_bounds(int index) const;
  ::Electronics::bounds* mutable_adj_pin_i_bounds(int index);
  ::Electronics::bounds* add_adj_pin_i_bounds();
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
      mutable_adj_pin_i_bounds();
  const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
      adj_pin_i_bounds() const;

  // repeated .Electronics.bounds out_pin_i_bounds = 22;
  int out_pin_i_bounds_size() const;
  void clear_out_pin_i_bounds();
  static const int kOutPinIBoundsFieldNumber = 22;
  const ::Electronics::bounds& out_pin_i_bounds(int index) const;
  ::Electronics::bounds* mutable_out_pin_i_bounds(int index);
  ::Electronics::bounds* add_out_pin_i_bounds();
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
      mutable_out_pin_i_bounds();
  const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
      out_pin_i_bounds() const;

  // repeated .Electronics.bounds gnd_pin_i_bounds = 23;
  int gnd_pin_i_bounds_size() const;
  void clear_gnd_pin_i_bounds();
  static const int kGndPinIBoundsFieldNumber = 23;
  const ::Electronics::bounds& gnd_pin_i_bounds(int index) const;
  ::Electronics::bounds* mutable_gnd_pin_i_bounds(int index);
  ::Electronics::bounds* add_gnd_pin_i_bounds();
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
      mutable_gnd_pin_i_bounds();
  const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
      gnd_pin_i_bounds() const;

  // repeated .Electronics.Linear_Constraint constraints = 26;
  int constraints_size() const;
  void clear_constraints();
  static const int kConstraintsFieldNumber = 26;
  const ::Electronics::Linear_Constraint& constraints(int index) const;
  ::Electronics::Linear_Constraint* mutable_constraints(int index);
  ::Electronics::Linear_Constraint* add_constraints();
  ::google::protobuf::RepeatedPtrField< ::Electronics::Linear_Constraint >*
      mutable_constraints();
  const ::google::protobuf::RepeatedPtrField< ::Electronics::Linear_Constraint >&
      constraints() const;

  // repeated string in_pin_row = 27;
  int in_pin_row_size() const;
  void clear_in_pin_row();
  static const int kInPinRowFieldNumber = 27;
  const ::std::string& in_pin_row(int index) const;
  ::std::string* mutable_in_pin_row(int index);
  void set_in_pin_row(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_in_pin_row(int index, ::std::string&& value);
  #endif
  void set_in_pin_row(int index, const char* value);
  void set_in_pin_row(int index, const char* value, size_t size);
  ::std::string* add_in_pin_row();
  void add_in_pin_row(const ::std::string& value);
  #if LANG_CXX11
  void add_in_pin_row(::std::string&& value);
  #endif
  void add_in_pin_row(const char* value);
  void add_in_pin_row(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& in_pin_row() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_in_pin_row();

  // repeated string en_pin_row = 28;
  int en_pin_row_size() const;
  void clear_en_pin_row();
  static const int kEnPinRowFieldNumber = 28;
  const ::std::string& en_pin_row(int index) const;
  ::std::string* mutable_en_pin_row(int index);
  void set_en_pin_row(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_en_pin_row(int index, ::std::string&& value);
  #endif
  void set_en_pin_row(int index, const char* value);
  void set_en_pin_row(int index, const char* value, size_t size);
  ::std::string* add_en_pin_row();
  void add_en_pin_row(const ::std::string& value);
  #if LANG_CXX11
  void add_en_pin_row(::std::string&& value);
  #endif
  void add_en_pin_row(const char* value);
  void add_en_pin_row(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& en_pin_row() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_en_pin_row();

  // repeated string adj_pin_row = 29;
  int adj_pin_row_size() const;
  void clear_adj_pin_row();
  static const int kAdjPinRowFieldNumber = 29;
  const ::std::string& adj_pin_row(int index) const;
  ::std::string* mutable_adj_pin_row(int index);
  void set_adj_pin_row(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_adj_pin_row(int index, ::std::string&& value);
  #endif
  void set_adj_pin_row(int index, const char* value);
  void set_adj_pin_row(int index, const char* value, size_t size);
  ::std::string* add_adj_pin_row();
  void add_adj_pin_row(const ::std::string& value);
  #if LANG_CXX11
  void add_adj_pin_row(::std::string&& value);
  #endif
  void add_adj_pin_row(const char* value);
  void add_adj_pin_row(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& adj_pin_row() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_adj_pin_row();

  // repeated string out_pin_row = 30;
  int out_pin_row_size() const;
  void clear_out_pin_row();
  static const int kOutPinRowFieldNumber = 30;
  const ::std::string& out_pin_row(int index) const;
  ::std::string* mutable_out_pin_row(int index);
  void set_out_pin_row(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_out_pin_row(int index, ::std::string&& value);
  #endif
  void set_out_pin_row(int index, const char* value);
  void set_out_pin_row(int index, const char* value, size_t size);
  ::std::string* add_out_pin_row();
  void add_out_pin_row(const ::std::string& value);
  #if LANG_CXX11
  void add_out_pin_row(::std::string&& value);
  #endif
  void add_out_pin_row(const char* value);
  void add_out_pin_row(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& out_pin_row() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_out_pin_row();

  // repeated string gnd_pin_row = 31;
  int gnd_pin_row_size() const;
  void clear_gnd_pin_row();
  static const int kGndPinRowFieldNumber = 31;
  const ::std::string& gnd_pin_row(int index) const;
  ::std::string* mutable_gnd_pin_row(int index);
  void set_gnd_pin_row(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_gnd_pin_row(int index, ::std::string&& value);
  #endif
  void set_gnd_pin_row(int index, const char* value);
  void set_gnd_pin_row(int index, const char* value, size_t size);
  ::std::string* add_gnd_pin_row();
  void add_gnd_pin_row(const ::std::string& value);
  #if LANG_CXX11
  void add_gnd_pin_row(::std::string&& value);
  #endif
  void add_gnd_pin_row(const char* value);
  void add_gnd_pin_row(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& gnd_pin_row() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_gnd_pin_row();

  // optional .Electronics.bounds resistor = 8;
  bool has_resistor() const;
  void clear_resistor();
  static const int kResistorFieldNumber = 8;
  const ::Electronics::bounds& resistor() const;
  ::Electronics::bounds* mutable_resistor();
  ::Electronics::bounds* release_resistor();
  void set_allocated_resistor(::Electronics::bounds* resistor);

  // optional .Electronics.bounds logic_bounds = 24;
  bool has_logic_bounds() const;
  void clear_logic_bounds();
  static const int kLogicBoundsFieldNumber = 24;
  const ::Electronics::bounds& logic_bounds() const;
  ::Electronics::bounds* mutable_logic_bounds();
  ::Electronics::bounds* release_logic_bounds();
  void set_allocated_logic_bounds(::Electronics::bounds* logic_bounds);

  // required int32 in_pin_num = 1;
  bool has_in_pin_num() const;
  void clear_in_pin_num();
  static const int kInPinNumFieldNumber = 1;
  ::google::protobuf::int32 in_pin_num() const;
  void set_in_pin_num(::google::protobuf::int32 value);

  // required int32 en_pin_num = 2;
  bool has_en_pin_num() const;
  void clear_en_pin_num();
  static const int kEnPinNumFieldNumber = 2;
  ::google::protobuf::int32 en_pin_num() const;
  void set_en_pin_num(::google::protobuf::int32 value);

  // required int32 adj_pin_num = 3;
  bool has_adj_pin_num() const;
  void clear_adj_pin_num();
  static const int kAdjPinNumFieldNumber = 3;
  ::google::protobuf::int32 adj_pin_num() const;
  void set_adj_pin_num(::google::protobuf::int32 value);

  // required int32 out_pin_num = 4;
  bool has_out_pin_num() const;
  void clear_out_pin_num();
  static const int kOutPinNumFieldNumber = 4;
  ::google::protobuf::int32 out_pin_num() const;
  void set_out_pin_num(::google::protobuf::int32 value);

  // optional double v_ref = 6;
  bool has_v_ref() const;
  void clear_v_ref();
  static const int kVRefFieldNumber = 6;
  double v_ref() const;
  void set_v_ref(double value);

  // optional double i_adj = 7;
  bool has_i_adj() const;
  void clear_i_adj();
  static const int kIAdjFieldNumber = 7;
  double i_adj() const;
  void set_i_adj(double value);

  // required int32 gnd_pin_num = 5;
  bool has_gnd_pin_num() const;
  void clear_gnd_pin_num();
  static const int kGndPinNumFieldNumber = 5;
  ::google::protobuf::int32 gnd_pin_num() const;
  void set_gnd_pin_num(::google::protobuf::int32 value);

  // required bool nonlin = 25;
  bool has_nonlin() const;
  void clear_nonlin();
  static const int kNonlinFieldNumber = 25;
  bool nonlin() const;
  void set_nonlin(bool value);

  // @@protoc_insertion_point(class_scope:Electronics.Vregulator)
 private:
  void set_has_in_pin_num();
  void clear_has_in_pin_num();
  void set_has_en_pin_num();
  void clear_has_en_pin_num();
  void set_has_adj_pin_num();
  void clear_has_adj_pin_num();
  void set_has_out_pin_num();
  void clear_has_out_pin_num();
  void set_has_gnd_pin_num();
  void clear_has_gnd_pin_num();
  void set_has_v_ref();
  void clear_has_v_ref();
  void set_has_i_adj();
  void clear_has_i_adj();
  void set_has_resistor();
  void clear_has_resistor();
  void set_has_logic_bounds();
  void clear_has_logic_bounds();
  void set_has_nonlin();
  void clear_has_nonlin();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> in_pin_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> en_pin_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> adj_pin_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> out_pin_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> gnd_pin_name_;
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds > in_pin_v_bounds_;
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds > en_pin_v_bounds_;
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds > adj_pin_v_bounds_;
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds > out_pin_v_bounds_;
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds > gnd_pin_v_bounds_;
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds > in_pin_i_bounds_;
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds > en_pin_i_bounds_;
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds > adj_pin_i_bounds_;
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds > out_pin_i_bounds_;
  ::google::protobuf::RepeatedPtrField< ::Electronics::bounds > gnd_pin_i_bounds_;
  ::google::protobuf::RepeatedPtrField< ::Electronics::Linear_Constraint > constraints_;
  ::google::protobuf::RepeatedPtrField< ::std::string> in_pin_row_;
  ::google::protobuf::RepeatedPtrField< ::std::string> en_pin_row_;
  ::google::protobuf::RepeatedPtrField< ::std::string> adj_pin_row_;
  ::google::protobuf::RepeatedPtrField< ::std::string> out_pin_row_;
  ::google::protobuf::RepeatedPtrField< ::std::string> gnd_pin_row_;
  ::Electronics::bounds* resistor_;
  ::Electronics::bounds* logic_bounds_;
  ::google::protobuf::int32 in_pin_num_;
  ::google::protobuf::int32 en_pin_num_;
  ::google::protobuf::int32 adj_pin_num_;
  ::google::protobuf::int32 out_pin_num_;
  double v_ref_;
  double i_adj_;
  ::google::protobuf::int32 gnd_pin_num_;
  bool nonlin_;
  friend struct protobuf_voltage_5fregulator_5ftemplate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Linear_Constraint

// repeated string var_name = 1;
inline int Linear_Constraint::var_name_size() const {
  return var_name_.size();
}
inline void Linear_Constraint::clear_var_name() {
  var_name_.Clear();
}
inline const ::std::string& Linear_Constraint::var_name(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Linear_Constraint.var_name)
  return var_name_.Get(index);
}
inline ::std::string* Linear_Constraint::mutable_var_name(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Linear_Constraint.var_name)
  return var_name_.Mutable(index);
}
inline void Linear_Constraint::set_var_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Electronics.Linear_Constraint.var_name)
  var_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Linear_Constraint::set_var_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Electronics.Linear_Constraint.var_name)
  var_name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Linear_Constraint::set_var_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  var_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Electronics.Linear_Constraint.var_name)
}
inline void Linear_Constraint::set_var_name(int index, const char* value, size_t size) {
  var_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Electronics.Linear_Constraint.var_name)
}
inline ::std::string* Linear_Constraint::add_var_name() {
  // @@protoc_insertion_point(field_add_mutable:Electronics.Linear_Constraint.var_name)
  return var_name_.Add();
}
inline void Linear_Constraint::add_var_name(const ::std::string& value) {
  var_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Electronics.Linear_Constraint.var_name)
}
#if LANG_CXX11
inline void Linear_Constraint::add_var_name(::std::string&& value) {
  var_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Electronics.Linear_Constraint.var_name)
}
#endif
inline void Linear_Constraint::add_var_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  var_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Electronics.Linear_Constraint.var_name)
}
inline void Linear_Constraint::add_var_name(const char* value, size_t size) {
  var_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Electronics.Linear_Constraint.var_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Linear_Constraint::var_name() const {
  // @@protoc_insertion_point(field_list:Electronics.Linear_Constraint.var_name)
  return var_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Linear_Constraint::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Linear_Constraint.var_name)
  return &var_name_;
}

// repeated double coefficient = 2;
inline int Linear_Constraint::coefficient_size() const {
  return coefficient_.size();
}
inline void Linear_Constraint::clear_coefficient() {
  coefficient_.Clear();
}
inline double Linear_Constraint::coefficient(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Linear_Constraint.coefficient)
  return coefficient_.Get(index);
}
inline void Linear_Constraint::set_coefficient(int index, double value) {
  coefficient_.Set(index, value);
  // @@protoc_insertion_point(field_set:Electronics.Linear_Constraint.coefficient)
}
inline void Linear_Constraint::add_coefficient(double value) {
  coefficient_.Add(value);
  // @@protoc_insertion_point(field_add:Electronics.Linear_Constraint.coefficient)
}
inline const ::google::protobuf::RepeatedField< double >&
Linear_Constraint::coefficient() const {
  // @@protoc_insertion_point(field_list:Electronics.Linear_Constraint.coefficient)
  return coefficient_;
}
inline ::google::protobuf::RepeatedField< double >*
Linear_Constraint::mutable_coefficient() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Linear_Constraint.coefficient)
  return &coefficient_;
}

// required double constant = 3;
inline bool Linear_Constraint::has_constant() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Linear_Constraint::set_has_constant() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Linear_Constraint::clear_has_constant() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Linear_Constraint::clear_constant() {
  constant_ = 0;
  clear_has_constant();
}
inline double Linear_Constraint::constant() const {
  // @@protoc_insertion_point(field_get:Electronics.Linear_Constraint.constant)
  return constant_;
}
inline void Linear_Constraint::set_constant(double value) {
  set_has_constant();
  constant_ = value;
  // @@protoc_insertion_point(field_set:Electronics.Linear_Constraint.constant)
}

// required .Electronics.Connection_type type = 4;
inline bool Linear_Constraint::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Linear_Constraint::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Linear_Constraint::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Linear_Constraint::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Electronics::Connection_type Linear_Constraint::type() const {
  // @@protoc_insertion_point(field_get:Electronics.Linear_Constraint.type)
  return static_cast< ::Electronics::Connection_type >(type_);
}
inline void Linear_Constraint::set_type(::Electronics::Connection_type value) {
  assert(::Electronics::Connection_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Electronics.Linear_Constraint.type)
}

// -------------------------------------------------------------------

// Vregulator

// required int32 in_pin_num = 1;
inline bool Vregulator::has_in_pin_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vregulator::set_has_in_pin_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vregulator::clear_has_in_pin_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vregulator::clear_in_pin_num() {
  in_pin_num_ = 0;
  clear_has_in_pin_num();
}
inline ::google::protobuf::int32 Vregulator::in_pin_num() const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.in_pin_num)
  return in_pin_num_;
}
inline void Vregulator::set_in_pin_num(::google::protobuf::int32 value) {
  set_has_in_pin_num();
  in_pin_num_ = value;
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.in_pin_num)
}

// required int32 en_pin_num = 2;
inline bool Vregulator::has_en_pin_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Vregulator::set_has_en_pin_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Vregulator::clear_has_en_pin_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Vregulator::clear_en_pin_num() {
  en_pin_num_ = 0;
  clear_has_en_pin_num();
}
inline ::google::protobuf::int32 Vregulator::en_pin_num() const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.en_pin_num)
  return en_pin_num_;
}
inline void Vregulator::set_en_pin_num(::google::protobuf::int32 value) {
  set_has_en_pin_num();
  en_pin_num_ = value;
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.en_pin_num)
}

// required int32 adj_pin_num = 3;
inline bool Vregulator::has_adj_pin_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Vregulator::set_has_adj_pin_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Vregulator::clear_has_adj_pin_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Vregulator::clear_adj_pin_num() {
  adj_pin_num_ = 0;
  clear_has_adj_pin_num();
}
inline ::google::protobuf::int32 Vregulator::adj_pin_num() const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.adj_pin_num)
  return adj_pin_num_;
}
inline void Vregulator::set_adj_pin_num(::google::protobuf::int32 value) {
  set_has_adj_pin_num();
  adj_pin_num_ = value;
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.adj_pin_num)
}

// required int32 out_pin_num = 4;
inline bool Vregulator::has_out_pin_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Vregulator::set_has_out_pin_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Vregulator::clear_has_out_pin_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Vregulator::clear_out_pin_num() {
  out_pin_num_ = 0;
  clear_has_out_pin_num();
}
inline ::google::protobuf::int32 Vregulator::out_pin_num() const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.out_pin_num)
  return out_pin_num_;
}
inline void Vregulator::set_out_pin_num(::google::protobuf::int32 value) {
  set_has_out_pin_num();
  out_pin_num_ = value;
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.out_pin_num)
}

// required int32 gnd_pin_num = 5;
inline bool Vregulator::has_gnd_pin_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Vregulator::set_has_gnd_pin_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Vregulator::clear_has_gnd_pin_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Vregulator::clear_gnd_pin_num() {
  gnd_pin_num_ = 0;
  clear_has_gnd_pin_num();
}
inline ::google::protobuf::int32 Vregulator::gnd_pin_num() const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.gnd_pin_num)
  return gnd_pin_num_;
}
inline void Vregulator::set_gnd_pin_num(::google::protobuf::int32 value) {
  set_has_gnd_pin_num();
  gnd_pin_num_ = value;
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.gnd_pin_num)
}

// optional double v_ref = 6;
inline bool Vregulator::has_v_ref() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Vregulator::set_has_v_ref() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Vregulator::clear_has_v_ref() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Vregulator::clear_v_ref() {
  v_ref_ = 0;
  clear_has_v_ref();
}
inline double Vregulator::v_ref() const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.v_ref)
  return v_ref_;
}
inline void Vregulator::set_v_ref(double value) {
  set_has_v_ref();
  v_ref_ = value;
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.v_ref)
}

// optional double i_adj = 7;
inline bool Vregulator::has_i_adj() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Vregulator::set_has_i_adj() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Vregulator::clear_has_i_adj() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Vregulator::clear_i_adj() {
  i_adj_ = 0;
  clear_has_i_adj();
}
inline double Vregulator::i_adj() const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.i_adj)
  return i_adj_;
}
inline void Vregulator::set_i_adj(double value) {
  set_has_i_adj();
  i_adj_ = value;
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.i_adj)
}

// optional .Electronics.bounds resistor = 8;
inline bool Vregulator::has_resistor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vregulator::set_has_resistor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vregulator::clear_has_resistor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vregulator::clear_resistor() {
  if (resistor_ != NULL) resistor_->::Electronics::bounds::Clear();
  clear_has_resistor();
}
inline const ::Electronics::bounds& Vregulator::resistor() const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.resistor)
  return resistor_ != NULL ? *resistor_
                         : *::Electronics::bounds::internal_default_instance();
}
inline ::Electronics::bounds* Vregulator::mutable_resistor() {
  set_has_resistor();
  if (resistor_ == NULL) {
    resistor_ = new ::Electronics::bounds;
  }
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.resistor)
  return resistor_;
}
inline ::Electronics::bounds* Vregulator::release_resistor() {
  // @@protoc_insertion_point(field_release:Electronics.Vregulator.resistor)
  clear_has_resistor();
  ::Electronics::bounds* temp = resistor_;
  resistor_ = NULL;
  return temp;
}
inline void Vregulator::set_allocated_resistor(::Electronics::bounds* resistor) {
  delete resistor_;
  resistor_ = resistor;
  if (resistor) {
    set_has_resistor();
  } else {
    clear_has_resistor();
  }
  // @@protoc_insertion_point(field_set_allocated:Electronics.Vregulator.resistor)
}

// repeated string in_pin_name = 9;
inline int Vregulator::in_pin_name_size() const {
  return in_pin_name_.size();
}
inline void Vregulator::clear_in_pin_name() {
  in_pin_name_.Clear();
}
inline const ::std::string& Vregulator::in_pin_name(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.in_pin_name)
  return in_pin_name_.Get(index);
}
inline ::std::string* Vregulator::mutable_in_pin_name(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.in_pin_name)
  return in_pin_name_.Mutable(index);
}
inline void Vregulator::set_in_pin_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.in_pin_name)
  in_pin_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Vregulator::set_in_pin_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.in_pin_name)
  in_pin_name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Vregulator::set_in_pin_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  in_pin_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Electronics.Vregulator.in_pin_name)
}
inline void Vregulator::set_in_pin_name(int index, const char* value, size_t size) {
  in_pin_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Electronics.Vregulator.in_pin_name)
}
inline ::std::string* Vregulator::add_in_pin_name() {
  // @@protoc_insertion_point(field_add_mutable:Electronics.Vregulator.in_pin_name)
  return in_pin_name_.Add();
}
inline void Vregulator::add_in_pin_name(const ::std::string& value) {
  in_pin_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.in_pin_name)
}
#if LANG_CXX11
inline void Vregulator::add_in_pin_name(::std::string&& value) {
  in_pin_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.in_pin_name)
}
#endif
inline void Vregulator::add_in_pin_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  in_pin_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Electronics.Vregulator.in_pin_name)
}
inline void Vregulator::add_in_pin_name(const char* value, size_t size) {
  in_pin_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Electronics.Vregulator.in_pin_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vregulator::in_pin_name() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.in_pin_name)
  return in_pin_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Vregulator::mutable_in_pin_name() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.in_pin_name)
  return &in_pin_name_;
}

// repeated string en_pin_name = 10;
inline int Vregulator::en_pin_name_size() const {
  return en_pin_name_.size();
}
inline void Vregulator::clear_en_pin_name() {
  en_pin_name_.Clear();
}
inline const ::std::string& Vregulator::en_pin_name(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.en_pin_name)
  return en_pin_name_.Get(index);
}
inline ::std::string* Vregulator::mutable_en_pin_name(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.en_pin_name)
  return en_pin_name_.Mutable(index);
}
inline void Vregulator::set_en_pin_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.en_pin_name)
  en_pin_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Vregulator::set_en_pin_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.en_pin_name)
  en_pin_name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Vregulator::set_en_pin_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  en_pin_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Electronics.Vregulator.en_pin_name)
}
inline void Vregulator::set_en_pin_name(int index, const char* value, size_t size) {
  en_pin_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Electronics.Vregulator.en_pin_name)
}
inline ::std::string* Vregulator::add_en_pin_name() {
  // @@protoc_insertion_point(field_add_mutable:Electronics.Vregulator.en_pin_name)
  return en_pin_name_.Add();
}
inline void Vregulator::add_en_pin_name(const ::std::string& value) {
  en_pin_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.en_pin_name)
}
#if LANG_CXX11
inline void Vregulator::add_en_pin_name(::std::string&& value) {
  en_pin_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.en_pin_name)
}
#endif
inline void Vregulator::add_en_pin_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  en_pin_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Electronics.Vregulator.en_pin_name)
}
inline void Vregulator::add_en_pin_name(const char* value, size_t size) {
  en_pin_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Electronics.Vregulator.en_pin_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vregulator::en_pin_name() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.en_pin_name)
  return en_pin_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Vregulator::mutable_en_pin_name() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.en_pin_name)
  return &en_pin_name_;
}

// repeated string adj_pin_name = 11;
inline int Vregulator::adj_pin_name_size() const {
  return adj_pin_name_.size();
}
inline void Vregulator::clear_adj_pin_name() {
  adj_pin_name_.Clear();
}
inline const ::std::string& Vregulator::adj_pin_name(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.adj_pin_name)
  return adj_pin_name_.Get(index);
}
inline ::std::string* Vregulator::mutable_adj_pin_name(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.adj_pin_name)
  return adj_pin_name_.Mutable(index);
}
inline void Vregulator::set_adj_pin_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.adj_pin_name)
  adj_pin_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Vregulator::set_adj_pin_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.adj_pin_name)
  adj_pin_name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Vregulator::set_adj_pin_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  adj_pin_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Electronics.Vregulator.adj_pin_name)
}
inline void Vregulator::set_adj_pin_name(int index, const char* value, size_t size) {
  adj_pin_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Electronics.Vregulator.adj_pin_name)
}
inline ::std::string* Vregulator::add_adj_pin_name() {
  // @@protoc_insertion_point(field_add_mutable:Electronics.Vregulator.adj_pin_name)
  return adj_pin_name_.Add();
}
inline void Vregulator::add_adj_pin_name(const ::std::string& value) {
  adj_pin_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.adj_pin_name)
}
#if LANG_CXX11
inline void Vregulator::add_adj_pin_name(::std::string&& value) {
  adj_pin_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.adj_pin_name)
}
#endif
inline void Vregulator::add_adj_pin_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  adj_pin_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Electronics.Vregulator.adj_pin_name)
}
inline void Vregulator::add_adj_pin_name(const char* value, size_t size) {
  adj_pin_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Electronics.Vregulator.adj_pin_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vregulator::adj_pin_name() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.adj_pin_name)
  return adj_pin_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Vregulator::mutable_adj_pin_name() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.adj_pin_name)
  return &adj_pin_name_;
}

// repeated string out_pin_name = 12;
inline int Vregulator::out_pin_name_size() const {
  return out_pin_name_.size();
}
inline void Vregulator::clear_out_pin_name() {
  out_pin_name_.Clear();
}
inline const ::std::string& Vregulator::out_pin_name(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.out_pin_name)
  return out_pin_name_.Get(index);
}
inline ::std::string* Vregulator::mutable_out_pin_name(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.out_pin_name)
  return out_pin_name_.Mutable(index);
}
inline void Vregulator::set_out_pin_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.out_pin_name)
  out_pin_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Vregulator::set_out_pin_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.out_pin_name)
  out_pin_name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Vregulator::set_out_pin_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  out_pin_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Electronics.Vregulator.out_pin_name)
}
inline void Vregulator::set_out_pin_name(int index, const char* value, size_t size) {
  out_pin_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Electronics.Vregulator.out_pin_name)
}
inline ::std::string* Vregulator::add_out_pin_name() {
  // @@protoc_insertion_point(field_add_mutable:Electronics.Vregulator.out_pin_name)
  return out_pin_name_.Add();
}
inline void Vregulator::add_out_pin_name(const ::std::string& value) {
  out_pin_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.out_pin_name)
}
#if LANG_CXX11
inline void Vregulator::add_out_pin_name(::std::string&& value) {
  out_pin_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.out_pin_name)
}
#endif
inline void Vregulator::add_out_pin_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  out_pin_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Electronics.Vregulator.out_pin_name)
}
inline void Vregulator::add_out_pin_name(const char* value, size_t size) {
  out_pin_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Electronics.Vregulator.out_pin_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vregulator::out_pin_name() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.out_pin_name)
  return out_pin_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Vregulator::mutable_out_pin_name() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.out_pin_name)
  return &out_pin_name_;
}

// repeated string gnd_pin_name = 13;
inline int Vregulator::gnd_pin_name_size() const {
  return gnd_pin_name_.size();
}
inline void Vregulator::clear_gnd_pin_name() {
  gnd_pin_name_.Clear();
}
inline const ::std::string& Vregulator::gnd_pin_name(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.gnd_pin_name)
  return gnd_pin_name_.Get(index);
}
inline ::std::string* Vregulator::mutable_gnd_pin_name(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.gnd_pin_name)
  return gnd_pin_name_.Mutable(index);
}
inline void Vregulator::set_gnd_pin_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.gnd_pin_name)
  gnd_pin_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Vregulator::set_gnd_pin_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.gnd_pin_name)
  gnd_pin_name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Vregulator::set_gnd_pin_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gnd_pin_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Electronics.Vregulator.gnd_pin_name)
}
inline void Vregulator::set_gnd_pin_name(int index, const char* value, size_t size) {
  gnd_pin_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Electronics.Vregulator.gnd_pin_name)
}
inline ::std::string* Vregulator::add_gnd_pin_name() {
  // @@protoc_insertion_point(field_add_mutable:Electronics.Vregulator.gnd_pin_name)
  return gnd_pin_name_.Add();
}
inline void Vregulator::add_gnd_pin_name(const ::std::string& value) {
  gnd_pin_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.gnd_pin_name)
}
#if LANG_CXX11
inline void Vregulator::add_gnd_pin_name(::std::string&& value) {
  gnd_pin_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.gnd_pin_name)
}
#endif
inline void Vregulator::add_gnd_pin_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gnd_pin_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Electronics.Vregulator.gnd_pin_name)
}
inline void Vregulator::add_gnd_pin_name(const char* value, size_t size) {
  gnd_pin_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Electronics.Vregulator.gnd_pin_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vregulator::gnd_pin_name() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.gnd_pin_name)
  return gnd_pin_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Vregulator::mutable_gnd_pin_name() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.gnd_pin_name)
  return &gnd_pin_name_;
}

// repeated .Electronics.bounds in_pin_v_bounds = 14;
inline int Vregulator::in_pin_v_bounds_size() const {
  return in_pin_v_bounds_.size();
}
inline void Vregulator::clear_in_pin_v_bounds() {
  in_pin_v_bounds_.Clear();
}
inline const ::Electronics::bounds& Vregulator::in_pin_v_bounds(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.in_pin_v_bounds)
  return in_pin_v_bounds_.Get(index);
}
inline ::Electronics::bounds* Vregulator::mutable_in_pin_v_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.in_pin_v_bounds)
  return in_pin_v_bounds_.Mutable(index);
}
inline ::Electronics::bounds* Vregulator::add_in_pin_v_bounds() {
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.in_pin_v_bounds)
  return in_pin_v_bounds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
Vregulator::mutable_in_pin_v_bounds() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.in_pin_v_bounds)
  return &in_pin_v_bounds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
Vregulator::in_pin_v_bounds() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.in_pin_v_bounds)
  return in_pin_v_bounds_;
}

// repeated .Electronics.bounds en_pin_v_bounds = 15;
inline int Vregulator::en_pin_v_bounds_size() const {
  return en_pin_v_bounds_.size();
}
inline void Vregulator::clear_en_pin_v_bounds() {
  en_pin_v_bounds_.Clear();
}
inline const ::Electronics::bounds& Vregulator::en_pin_v_bounds(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.en_pin_v_bounds)
  return en_pin_v_bounds_.Get(index);
}
inline ::Electronics::bounds* Vregulator::mutable_en_pin_v_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.en_pin_v_bounds)
  return en_pin_v_bounds_.Mutable(index);
}
inline ::Electronics::bounds* Vregulator::add_en_pin_v_bounds() {
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.en_pin_v_bounds)
  return en_pin_v_bounds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
Vregulator::mutable_en_pin_v_bounds() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.en_pin_v_bounds)
  return &en_pin_v_bounds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
Vregulator::en_pin_v_bounds() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.en_pin_v_bounds)
  return en_pin_v_bounds_;
}

// repeated .Electronics.bounds adj_pin_v_bounds = 16;
inline int Vregulator::adj_pin_v_bounds_size() const {
  return adj_pin_v_bounds_.size();
}
inline void Vregulator::clear_adj_pin_v_bounds() {
  adj_pin_v_bounds_.Clear();
}
inline const ::Electronics::bounds& Vregulator::adj_pin_v_bounds(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.adj_pin_v_bounds)
  return adj_pin_v_bounds_.Get(index);
}
inline ::Electronics::bounds* Vregulator::mutable_adj_pin_v_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.adj_pin_v_bounds)
  return adj_pin_v_bounds_.Mutable(index);
}
inline ::Electronics::bounds* Vregulator::add_adj_pin_v_bounds() {
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.adj_pin_v_bounds)
  return adj_pin_v_bounds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
Vregulator::mutable_adj_pin_v_bounds() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.adj_pin_v_bounds)
  return &adj_pin_v_bounds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
Vregulator::adj_pin_v_bounds() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.adj_pin_v_bounds)
  return adj_pin_v_bounds_;
}

// repeated .Electronics.bounds out_pin_v_bounds = 17;
inline int Vregulator::out_pin_v_bounds_size() const {
  return out_pin_v_bounds_.size();
}
inline void Vregulator::clear_out_pin_v_bounds() {
  out_pin_v_bounds_.Clear();
}
inline const ::Electronics::bounds& Vregulator::out_pin_v_bounds(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.out_pin_v_bounds)
  return out_pin_v_bounds_.Get(index);
}
inline ::Electronics::bounds* Vregulator::mutable_out_pin_v_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.out_pin_v_bounds)
  return out_pin_v_bounds_.Mutable(index);
}
inline ::Electronics::bounds* Vregulator::add_out_pin_v_bounds() {
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.out_pin_v_bounds)
  return out_pin_v_bounds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
Vregulator::mutable_out_pin_v_bounds() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.out_pin_v_bounds)
  return &out_pin_v_bounds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
Vregulator::out_pin_v_bounds() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.out_pin_v_bounds)
  return out_pin_v_bounds_;
}

// repeated .Electronics.bounds gnd_pin_v_bounds = 18;
inline int Vregulator::gnd_pin_v_bounds_size() const {
  return gnd_pin_v_bounds_.size();
}
inline void Vregulator::clear_gnd_pin_v_bounds() {
  gnd_pin_v_bounds_.Clear();
}
inline const ::Electronics::bounds& Vregulator::gnd_pin_v_bounds(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.gnd_pin_v_bounds)
  return gnd_pin_v_bounds_.Get(index);
}
inline ::Electronics::bounds* Vregulator::mutable_gnd_pin_v_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.gnd_pin_v_bounds)
  return gnd_pin_v_bounds_.Mutable(index);
}
inline ::Electronics::bounds* Vregulator::add_gnd_pin_v_bounds() {
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.gnd_pin_v_bounds)
  return gnd_pin_v_bounds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
Vregulator::mutable_gnd_pin_v_bounds() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.gnd_pin_v_bounds)
  return &gnd_pin_v_bounds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
Vregulator::gnd_pin_v_bounds() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.gnd_pin_v_bounds)
  return gnd_pin_v_bounds_;
}

// repeated .Electronics.bounds in_pin_i_bounds = 19;
inline int Vregulator::in_pin_i_bounds_size() const {
  return in_pin_i_bounds_.size();
}
inline void Vregulator::clear_in_pin_i_bounds() {
  in_pin_i_bounds_.Clear();
}
inline const ::Electronics::bounds& Vregulator::in_pin_i_bounds(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.in_pin_i_bounds)
  return in_pin_i_bounds_.Get(index);
}
inline ::Electronics::bounds* Vregulator::mutable_in_pin_i_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.in_pin_i_bounds)
  return in_pin_i_bounds_.Mutable(index);
}
inline ::Electronics::bounds* Vregulator::add_in_pin_i_bounds() {
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.in_pin_i_bounds)
  return in_pin_i_bounds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
Vregulator::mutable_in_pin_i_bounds() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.in_pin_i_bounds)
  return &in_pin_i_bounds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
Vregulator::in_pin_i_bounds() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.in_pin_i_bounds)
  return in_pin_i_bounds_;
}

// repeated .Electronics.bounds en_pin_i_bounds = 20;
inline int Vregulator::en_pin_i_bounds_size() const {
  return en_pin_i_bounds_.size();
}
inline void Vregulator::clear_en_pin_i_bounds() {
  en_pin_i_bounds_.Clear();
}
inline const ::Electronics::bounds& Vregulator::en_pin_i_bounds(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.en_pin_i_bounds)
  return en_pin_i_bounds_.Get(index);
}
inline ::Electronics::bounds* Vregulator::mutable_en_pin_i_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.en_pin_i_bounds)
  return en_pin_i_bounds_.Mutable(index);
}
inline ::Electronics::bounds* Vregulator::add_en_pin_i_bounds() {
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.en_pin_i_bounds)
  return en_pin_i_bounds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
Vregulator::mutable_en_pin_i_bounds() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.en_pin_i_bounds)
  return &en_pin_i_bounds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
Vregulator::en_pin_i_bounds() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.en_pin_i_bounds)
  return en_pin_i_bounds_;
}

// repeated .Electronics.bounds adj_pin_i_bounds = 21;
inline int Vregulator::adj_pin_i_bounds_size() const {
  return adj_pin_i_bounds_.size();
}
inline void Vregulator::clear_adj_pin_i_bounds() {
  adj_pin_i_bounds_.Clear();
}
inline const ::Electronics::bounds& Vregulator::adj_pin_i_bounds(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.adj_pin_i_bounds)
  return adj_pin_i_bounds_.Get(index);
}
inline ::Electronics::bounds* Vregulator::mutable_adj_pin_i_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.adj_pin_i_bounds)
  return adj_pin_i_bounds_.Mutable(index);
}
inline ::Electronics::bounds* Vregulator::add_adj_pin_i_bounds() {
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.adj_pin_i_bounds)
  return adj_pin_i_bounds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
Vregulator::mutable_adj_pin_i_bounds() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.adj_pin_i_bounds)
  return &adj_pin_i_bounds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
Vregulator::adj_pin_i_bounds() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.adj_pin_i_bounds)
  return adj_pin_i_bounds_;
}

// repeated .Electronics.bounds out_pin_i_bounds = 22;
inline int Vregulator::out_pin_i_bounds_size() const {
  return out_pin_i_bounds_.size();
}
inline void Vregulator::clear_out_pin_i_bounds() {
  out_pin_i_bounds_.Clear();
}
inline const ::Electronics::bounds& Vregulator::out_pin_i_bounds(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.out_pin_i_bounds)
  return out_pin_i_bounds_.Get(index);
}
inline ::Electronics::bounds* Vregulator::mutable_out_pin_i_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.out_pin_i_bounds)
  return out_pin_i_bounds_.Mutable(index);
}
inline ::Electronics::bounds* Vregulator::add_out_pin_i_bounds() {
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.out_pin_i_bounds)
  return out_pin_i_bounds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
Vregulator::mutable_out_pin_i_bounds() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.out_pin_i_bounds)
  return &out_pin_i_bounds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
Vregulator::out_pin_i_bounds() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.out_pin_i_bounds)
  return out_pin_i_bounds_;
}

// repeated .Electronics.bounds gnd_pin_i_bounds = 23;
inline int Vregulator::gnd_pin_i_bounds_size() const {
  return gnd_pin_i_bounds_.size();
}
inline void Vregulator::clear_gnd_pin_i_bounds() {
  gnd_pin_i_bounds_.Clear();
}
inline const ::Electronics::bounds& Vregulator::gnd_pin_i_bounds(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.gnd_pin_i_bounds)
  return gnd_pin_i_bounds_.Get(index);
}
inline ::Electronics::bounds* Vregulator::mutable_gnd_pin_i_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.gnd_pin_i_bounds)
  return gnd_pin_i_bounds_.Mutable(index);
}
inline ::Electronics::bounds* Vregulator::add_gnd_pin_i_bounds() {
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.gnd_pin_i_bounds)
  return gnd_pin_i_bounds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >*
Vregulator::mutable_gnd_pin_i_bounds() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.gnd_pin_i_bounds)
  return &gnd_pin_i_bounds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Electronics::bounds >&
Vregulator::gnd_pin_i_bounds() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.gnd_pin_i_bounds)
  return gnd_pin_i_bounds_;
}

// optional .Electronics.bounds logic_bounds = 24;
inline bool Vregulator::has_logic_bounds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vregulator::set_has_logic_bounds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vregulator::clear_has_logic_bounds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vregulator::clear_logic_bounds() {
  if (logic_bounds_ != NULL) logic_bounds_->::Electronics::bounds::Clear();
  clear_has_logic_bounds();
}
inline const ::Electronics::bounds& Vregulator::logic_bounds() const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.logic_bounds)
  return logic_bounds_ != NULL ? *logic_bounds_
                         : *::Electronics::bounds::internal_default_instance();
}
inline ::Electronics::bounds* Vregulator::mutable_logic_bounds() {
  set_has_logic_bounds();
  if (logic_bounds_ == NULL) {
    logic_bounds_ = new ::Electronics::bounds;
  }
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.logic_bounds)
  return logic_bounds_;
}
inline ::Electronics::bounds* Vregulator::release_logic_bounds() {
  // @@protoc_insertion_point(field_release:Electronics.Vregulator.logic_bounds)
  clear_has_logic_bounds();
  ::Electronics::bounds* temp = logic_bounds_;
  logic_bounds_ = NULL;
  return temp;
}
inline void Vregulator::set_allocated_logic_bounds(::Electronics::bounds* logic_bounds) {
  delete logic_bounds_;
  logic_bounds_ = logic_bounds;
  if (logic_bounds) {
    set_has_logic_bounds();
  } else {
    clear_has_logic_bounds();
  }
  // @@protoc_insertion_point(field_set_allocated:Electronics.Vregulator.logic_bounds)
}

// required bool nonlin = 25;
inline bool Vregulator::has_nonlin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Vregulator::set_has_nonlin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Vregulator::clear_has_nonlin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Vregulator::clear_nonlin() {
  nonlin_ = false;
  clear_has_nonlin();
}
inline bool Vregulator::nonlin() const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.nonlin)
  return nonlin_;
}
inline void Vregulator::set_nonlin(bool value) {
  set_has_nonlin();
  nonlin_ = value;
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.nonlin)
}

// repeated .Electronics.Linear_Constraint constraints = 26;
inline int Vregulator::constraints_size() const {
  return constraints_.size();
}
inline void Vregulator::clear_constraints() {
  constraints_.Clear();
}
inline const ::Electronics::Linear_Constraint& Vregulator::constraints(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.constraints)
  return constraints_.Get(index);
}
inline ::Electronics::Linear_Constraint* Vregulator::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.constraints)
  return constraints_.Mutable(index);
}
inline ::Electronics::Linear_Constraint* Vregulator::add_constraints() {
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.constraints)
  return constraints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Electronics::Linear_Constraint >*
Vregulator::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.constraints)
  return &constraints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Electronics::Linear_Constraint >&
Vregulator::constraints() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.constraints)
  return constraints_;
}

// repeated string in_pin_row = 27;
inline int Vregulator::in_pin_row_size() const {
  return in_pin_row_.size();
}
inline void Vregulator::clear_in_pin_row() {
  in_pin_row_.Clear();
}
inline const ::std::string& Vregulator::in_pin_row(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.in_pin_row)
  return in_pin_row_.Get(index);
}
inline ::std::string* Vregulator::mutable_in_pin_row(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.in_pin_row)
  return in_pin_row_.Mutable(index);
}
inline void Vregulator::set_in_pin_row(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.in_pin_row)
  in_pin_row_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Vregulator::set_in_pin_row(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.in_pin_row)
  in_pin_row_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Vregulator::set_in_pin_row(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  in_pin_row_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Electronics.Vregulator.in_pin_row)
}
inline void Vregulator::set_in_pin_row(int index, const char* value, size_t size) {
  in_pin_row_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Electronics.Vregulator.in_pin_row)
}
inline ::std::string* Vregulator::add_in_pin_row() {
  // @@protoc_insertion_point(field_add_mutable:Electronics.Vregulator.in_pin_row)
  return in_pin_row_.Add();
}
inline void Vregulator::add_in_pin_row(const ::std::string& value) {
  in_pin_row_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.in_pin_row)
}
#if LANG_CXX11
inline void Vregulator::add_in_pin_row(::std::string&& value) {
  in_pin_row_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.in_pin_row)
}
#endif
inline void Vregulator::add_in_pin_row(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  in_pin_row_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Electronics.Vregulator.in_pin_row)
}
inline void Vregulator::add_in_pin_row(const char* value, size_t size) {
  in_pin_row_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Electronics.Vregulator.in_pin_row)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vregulator::in_pin_row() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.in_pin_row)
  return in_pin_row_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Vregulator::mutable_in_pin_row() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.in_pin_row)
  return &in_pin_row_;
}

// repeated string en_pin_row = 28;
inline int Vregulator::en_pin_row_size() const {
  return en_pin_row_.size();
}
inline void Vregulator::clear_en_pin_row() {
  en_pin_row_.Clear();
}
inline const ::std::string& Vregulator::en_pin_row(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.en_pin_row)
  return en_pin_row_.Get(index);
}
inline ::std::string* Vregulator::mutable_en_pin_row(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.en_pin_row)
  return en_pin_row_.Mutable(index);
}
inline void Vregulator::set_en_pin_row(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.en_pin_row)
  en_pin_row_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Vregulator::set_en_pin_row(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.en_pin_row)
  en_pin_row_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Vregulator::set_en_pin_row(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  en_pin_row_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Electronics.Vregulator.en_pin_row)
}
inline void Vregulator::set_en_pin_row(int index, const char* value, size_t size) {
  en_pin_row_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Electronics.Vregulator.en_pin_row)
}
inline ::std::string* Vregulator::add_en_pin_row() {
  // @@protoc_insertion_point(field_add_mutable:Electronics.Vregulator.en_pin_row)
  return en_pin_row_.Add();
}
inline void Vregulator::add_en_pin_row(const ::std::string& value) {
  en_pin_row_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.en_pin_row)
}
#if LANG_CXX11
inline void Vregulator::add_en_pin_row(::std::string&& value) {
  en_pin_row_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.en_pin_row)
}
#endif
inline void Vregulator::add_en_pin_row(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  en_pin_row_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Electronics.Vregulator.en_pin_row)
}
inline void Vregulator::add_en_pin_row(const char* value, size_t size) {
  en_pin_row_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Electronics.Vregulator.en_pin_row)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vregulator::en_pin_row() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.en_pin_row)
  return en_pin_row_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Vregulator::mutable_en_pin_row() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.en_pin_row)
  return &en_pin_row_;
}

// repeated string adj_pin_row = 29;
inline int Vregulator::adj_pin_row_size() const {
  return adj_pin_row_.size();
}
inline void Vregulator::clear_adj_pin_row() {
  adj_pin_row_.Clear();
}
inline const ::std::string& Vregulator::adj_pin_row(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.adj_pin_row)
  return adj_pin_row_.Get(index);
}
inline ::std::string* Vregulator::mutable_adj_pin_row(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.adj_pin_row)
  return adj_pin_row_.Mutable(index);
}
inline void Vregulator::set_adj_pin_row(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.adj_pin_row)
  adj_pin_row_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Vregulator::set_adj_pin_row(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.adj_pin_row)
  adj_pin_row_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Vregulator::set_adj_pin_row(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  adj_pin_row_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Electronics.Vregulator.adj_pin_row)
}
inline void Vregulator::set_adj_pin_row(int index, const char* value, size_t size) {
  adj_pin_row_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Electronics.Vregulator.adj_pin_row)
}
inline ::std::string* Vregulator::add_adj_pin_row() {
  // @@protoc_insertion_point(field_add_mutable:Electronics.Vregulator.adj_pin_row)
  return adj_pin_row_.Add();
}
inline void Vregulator::add_adj_pin_row(const ::std::string& value) {
  adj_pin_row_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.adj_pin_row)
}
#if LANG_CXX11
inline void Vregulator::add_adj_pin_row(::std::string&& value) {
  adj_pin_row_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.adj_pin_row)
}
#endif
inline void Vregulator::add_adj_pin_row(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  adj_pin_row_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Electronics.Vregulator.adj_pin_row)
}
inline void Vregulator::add_adj_pin_row(const char* value, size_t size) {
  adj_pin_row_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Electronics.Vregulator.adj_pin_row)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vregulator::adj_pin_row() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.adj_pin_row)
  return adj_pin_row_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Vregulator::mutable_adj_pin_row() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.adj_pin_row)
  return &adj_pin_row_;
}

// repeated string out_pin_row = 30;
inline int Vregulator::out_pin_row_size() const {
  return out_pin_row_.size();
}
inline void Vregulator::clear_out_pin_row() {
  out_pin_row_.Clear();
}
inline const ::std::string& Vregulator::out_pin_row(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.out_pin_row)
  return out_pin_row_.Get(index);
}
inline ::std::string* Vregulator::mutable_out_pin_row(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.out_pin_row)
  return out_pin_row_.Mutable(index);
}
inline void Vregulator::set_out_pin_row(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.out_pin_row)
  out_pin_row_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Vregulator::set_out_pin_row(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.out_pin_row)
  out_pin_row_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Vregulator::set_out_pin_row(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  out_pin_row_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Electronics.Vregulator.out_pin_row)
}
inline void Vregulator::set_out_pin_row(int index, const char* value, size_t size) {
  out_pin_row_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Electronics.Vregulator.out_pin_row)
}
inline ::std::string* Vregulator::add_out_pin_row() {
  // @@protoc_insertion_point(field_add_mutable:Electronics.Vregulator.out_pin_row)
  return out_pin_row_.Add();
}
inline void Vregulator::add_out_pin_row(const ::std::string& value) {
  out_pin_row_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.out_pin_row)
}
#if LANG_CXX11
inline void Vregulator::add_out_pin_row(::std::string&& value) {
  out_pin_row_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.out_pin_row)
}
#endif
inline void Vregulator::add_out_pin_row(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  out_pin_row_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Electronics.Vregulator.out_pin_row)
}
inline void Vregulator::add_out_pin_row(const char* value, size_t size) {
  out_pin_row_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Electronics.Vregulator.out_pin_row)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vregulator::out_pin_row() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.out_pin_row)
  return out_pin_row_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Vregulator::mutable_out_pin_row() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.out_pin_row)
  return &out_pin_row_;
}

// repeated string gnd_pin_row = 31;
inline int Vregulator::gnd_pin_row_size() const {
  return gnd_pin_row_.size();
}
inline void Vregulator::clear_gnd_pin_row() {
  gnd_pin_row_.Clear();
}
inline const ::std::string& Vregulator::gnd_pin_row(int index) const {
  // @@protoc_insertion_point(field_get:Electronics.Vregulator.gnd_pin_row)
  return gnd_pin_row_.Get(index);
}
inline ::std::string* Vregulator::mutable_gnd_pin_row(int index) {
  // @@protoc_insertion_point(field_mutable:Electronics.Vregulator.gnd_pin_row)
  return gnd_pin_row_.Mutable(index);
}
inline void Vregulator::set_gnd_pin_row(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.gnd_pin_row)
  gnd_pin_row_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Vregulator::set_gnd_pin_row(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Electronics.Vregulator.gnd_pin_row)
  gnd_pin_row_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Vregulator::set_gnd_pin_row(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gnd_pin_row_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Electronics.Vregulator.gnd_pin_row)
}
inline void Vregulator::set_gnd_pin_row(int index, const char* value, size_t size) {
  gnd_pin_row_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Electronics.Vregulator.gnd_pin_row)
}
inline ::std::string* Vregulator::add_gnd_pin_row() {
  // @@protoc_insertion_point(field_add_mutable:Electronics.Vregulator.gnd_pin_row)
  return gnd_pin_row_.Add();
}
inline void Vregulator::add_gnd_pin_row(const ::std::string& value) {
  gnd_pin_row_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.gnd_pin_row)
}
#if LANG_CXX11
inline void Vregulator::add_gnd_pin_row(::std::string&& value) {
  gnd_pin_row_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Electronics.Vregulator.gnd_pin_row)
}
#endif
inline void Vregulator::add_gnd_pin_row(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gnd_pin_row_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Electronics.Vregulator.gnd_pin_row)
}
inline void Vregulator::add_gnd_pin_row(const char* value, size_t size) {
  gnd_pin_row_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Electronics.Vregulator.gnd_pin_row)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vregulator::gnd_pin_row() const {
  // @@protoc_insertion_point(field_list:Electronics.Vregulator.gnd_pin_row)
  return gnd_pin_row_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Vregulator::mutable_gnd_pin_row() {
  // @@protoc_insertion_point(field_mutable_list:Electronics.Vregulator.gnd_pin_row)
  return &gnd_pin_row_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Electronics

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Electronics::Connection_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Electronics::Connection_type>() {
  return ::Electronics::Connection_type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_voltage_5fregulator_5ftemplate_2eproto__INCLUDED
